import{_ as s,c as a,o as i,ag as n}from"./chunks/framework.CbEZKkNm.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"text/chapter4-n8n/1、一些入门使用.md","filePath":"text/chapter4-n8n/1、一些入门使用.md"}'),d={name:"text/chapter4-n8n/1、一些入门使用.md"};function p(e,t,l,h,r,k){return i(),a("div",null,t[0]||(t[0]=[n(`<p>n8n的操作重点：</p><p>1、理解数据如何流动（最重要）：</p><p>比如每个节点输出的数据结构是怎样的。 90%的n8n问题都是因为不理解数据结构或引用错误</p><p>2、掌握常用节点：</p><p>Webhook - 接收外部数据 HTTP Request - 调用API Set/Edit Fields - 数据转换 IF - 条件判断 Code - 自定义逻辑</p><p>3、具备调试思维</p><p>学会用“执行到此节点”功能查看每一步的数据。出错时先看错误信息，再检查数据结构。善用固定数据功能来测试。</p><p><strong>n8n的本质就是：数据从一个节点流向另一个节点，你要做的就是控制这个流动过程。</strong></p><p>能实现哪些自动化？ 答：内容多平台分发、数据定时备份同步、邮件自动处理、AI 协作流程、团队协作自动化等，航海会提供大量实战案例。</p><h2 id="部署地点-部署方式" tabindex="-1">部署地点 + 部署方式： <a class="header-anchor" href="#部署地点-部署方式" aria-label="Permalink to &quot;部署地点 + 部署方式：&quot;">​</a></h2><blockquote><p>第一阶段：了解 n8n 并完成环境搭建（约 2 天） 学习 n8n 4种部署方式（约 0.5 天） 完成 Docker 本地部署与至少一种云端部署，搭建好实操环境（约 1.5 天）</p></blockquote><p>1、本地/云端</p><p>2、n8n Cloud、Docker 和 npm</p><h3 id="部署方式汇总" tabindex="-1">部署方式汇总： <a class="header-anchor" href="#部署方式汇总" aria-label="Permalink to &quot;部署方式汇总：&quot;">​</a></h3><table tabindex="0"><thead><tr><th>部署方式</th><th>官网云托管（n8n cloud）</th><th>云托管平台 (PaaS)如 Zeabur, Clawcloud</th><th>云服务器部署 (VPS)</th><th>本地桌面部署 (Local)</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="本地部署" tabindex="-1">本地部署 <a class="header-anchor" href="#本地部署" aria-label="Permalink to &quot;本地部署&quot;">​</a></h3><p>可能会遇到一些问题，可以直接去问 AI ，能解决</p><p>自己遇到的具体问题在Claude上面，目前还没有整理</p><h3 id="云端部署" tabindex="-1">云端部署 <a class="header-anchor" href="#云端部署" aria-label="Permalink to &quot;云端部署&quot;">​</a></h3><p>……</p><p>编写工作流操作说明书：</p><p>在建立和测试自动化工作流时，往往需要不断点击 Execute step，反复验证流程是否正确运作。 但是工作流启动正常运行，我们一般并不会常回来检查——除非发生错误。 记录工作流的思考逻辑和步骤，其实是在为未来的自己或他人写一本操作指南，这也是一种深刻的复盘过程。复盘不仅仅是简单地回顾，更是为了未来能够进行真正有效的学习。 养成记录的习惯，不只是为了方便自己快速理解工作流，更是在关键时刻为问题诊断提供可靠依据，让自动化工作流变得更容易维护。 你可以使用 n8n 的「便利贴」功能来记录工作流的思路与步骤： . 打开工作流：进入 n8n 界面，找到并打开你要记录的工作流 . 添加便利贴：点击工作区右侧的便签按钮 . 开始记录思考逻辑、步骤记录：Sticky Note 支持 Markdown 格式，所以也可以加入不同标题大小、粗体、链接等等。</p><ul><li></li></ul><p>画布在支持用触控板和界面左下角的缩放按钮进行缩放。 . 画布上的每一个节点都支持鼠标拖拽，当鼠标悬浮到特定节点上时，每个节点自身也有一个➡️，这个代表的是单步执行，也就是只有这个环节的跑一下程序，这个在 Debug 的时候会非常有用。</p><p>--</p><p>第二章节：界面导览部分还需要和之前重新看</p><ul><li></li></ul><p>在测试3.1的工作流，结果就是，不同的模型会带来不同的结果。ds可以概括出来RSS中的内容，但是使用2.5flash，就只能读取标题，可能因为不能搜索？ 如果想内置提示词，可以打开 AI Agent 板块，调整提示来源，输入你的提示词</p><p>现在的问题是：里面具体框框都可以干什么，还不懂</p><p>设置自动启动（推荐）</p><p>如果想让n8n在电脑重启后自动运行，删除当前容器并重新创建：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 停止并删除当前容器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">docker rm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n8n</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建自动重启的容器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">docker run </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name n8n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">restart always </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5678</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5678</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v n8n_data:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">home</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.n8n n8nio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n8n</span></span></code></pre></div><p>添加了 <code>--restart always</code> 参数后：</p><ul><li>电脑重启时会自动启动n8n</li><li>容器异常退出时会自动重启</li><li>Docker Desktop启动时会自动启动n8n</li></ul>`,34)]))}const c=s(d,[["render",p]]);export{E as __pageData,c as default};
